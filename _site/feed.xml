<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jongmin's Blog</title>
    <description>description</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 19 Oct 2019 00:30:02 +0900</pubDate>
    <lastBuildDate>Sat, 19 Oct 2019 00:30:02 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>[WEB] HTTP / HTTPS</title>
        <description>&lt;h1 id=&quot;1-http&quot;&gt;1. HTTP&lt;/h1&gt;

&lt;p&gt;HTTP란 Hyper Text Transfer Protocol의 약자이다. 대부분 알고 있듯이 인터넷에서 데이터를 주고 받을 수 있는 통신 규약이다.
1989년 Tim Berners Lee에 의해 개발 되었다. HTTP가 개발 전과 개발 후에는 어떤 차이점이 있을까?&lt;/p&gt;

&lt;p&gt;HTTP 개발 전은 HT(Hyper Text)라고 할 수 있다. 말 그대로 Hyper Text이다. 단지 Terminal을 통해 문자만을 주고 받을 수 있었다.
여기에 TP(Transfer Protocol)이 추가 되었다. HTTP의 대전제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에 요청한다. 그리고 서버는 해당요청에
응답한다&lt;/code&gt;이다. 여기서 주의 깊게 바야할 점은 사용자가 요청한 뒤 서버가 요청한다는 것이다. 이점은 뒤에서 보기로 하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-1-http의-특징&quot;&gt;1-1. HTTP의 특징&lt;/h2&gt;
&lt;h3 id=&quot;1-비연결성contectionless&quot;&gt;1) 비연결성(Contectionless)&lt;/h3&gt;

&lt;p&gt;HTTP는 Client가 요청을 보내고 Server가 응답을 맞치면 연결을 끊어버린다. 그 이유는 무엇일까? 만약 다수의 Client와 연결을 유지한다면 많은 리소스가 발생할 것이다.
따라서 연결을 유지하기 위한 리소스를 줄이면 더 많은 연결을 할 수 있으므로 비연결적인 특징을 갖는다.&lt;/p&gt;

&lt;p&gt;물론 이 비연결성이 장점만을 갖는 것이 아니다. 서버는 클라이언트를 기억하고 있지 않으므로 동일한 클라이언트의 모든 요청에 대해, 매번 새로운 연결을 시도/해제의 과정을 거쳐야하므로 연결/해제에 대한 오베헤드가 발생한다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;이에 대한 대책으로는 &lt;strong&gt;KeepAlive&lt;/strong&gt; 속성이 있다. KeepAlive는 지정된 시간동안 서버와 클라이언트 사이에서 패킷 교환이 없을 경우, 상대방의 안부를 묻기 위해 패킷을 주기적으로 보내는 것을 말한다. 이 때 패킷의 반응이 없으면 접속을 끊게 된다. 주기적으로 Client의 상태를 체크한다는 것은 완벽한 해결책이라 할 수 없다. 상태를 유지하기 위한 메모리가 많이 사용될 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-무상태stateless&quot;&gt;2) 무상태(Stateless)&lt;/h3&gt;

&lt;p&gt;Connectionless로 인해 서버는 Client를 식별할 수가 없는데, 이를 무상태(Stateless)라고 한다.&lt;/p&gt;

&lt;p&gt;이 Connectionless로 인해 Client를 식별할 수 없는 경우 매번 새로운 인증을 해야하는 번거로움이 발생한다. 그말은 즉, 페이지 접속 -&amp;gt; 로그인 -&amp;gt; 상품 주문 -&amp;gt; 로그인… 의 무한 반복이다. 이를 해결하기 위해서 쿠키, 세션, 토큰(OAuth, JWT) 등을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-응답-상태코드&quot;&gt;3) 응답 상태코드&lt;/h3&gt;

&lt;p&gt;Client가 서버에 요청을 보내면 서버는 요청에 대한 처리상태를 숫자로 반환한다.&lt;/p&gt;

&lt;p&gt;먼저 간단히 표현하면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;100 ~ 109 : 메시지 정보&lt;/li&gt;
  &lt;li&gt;200 ~ 206 : 요청 성공&lt;/li&gt;
  &lt;li&gt;300 ~ 305 : Redirection&lt;/li&gt;
  &lt;li&gt;400 ~ 415 : Client Error&lt;/li&gt;
  &lt;li&gt;500 ~ 505 : Server Error
    &lt;blockquote&gt;
      &lt;p&gt;가장 많이 보는 코드는 다음과 같다. &lt;br /&gt;&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;200(Ok) : 요청 정상 처리 &lt;br /&gt;&lt;/li&gt;
        &lt;li&gt;400(Bad Request) : Client의 요청 구문이 잘못됨(브라우저는 200과 동일하게 취급)&lt;br /&gt;&lt;/li&gt;
        &lt;li&gt;403(Forbidden) : 접근 금지 응답 &lt;br /&gt;&lt;/li&gt;
        &lt;li&gt;404(Not found) : Client가 요청한 리소스가 서버에 없음 &lt;br /&gt;&lt;/li&gt;
        &lt;li&gt;500(Internal Server Error) : Server에서 Client요청을 처리 중에 에러가 발생&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-http-method&quot;&gt;4) HTTP Method&lt;/h3&gt;

&lt;p&gt;HTTP Method는 Client와 Server사이에 이루어지는 Request와 Response 데이터를 전송하는 방식을 말한다.&lt;/p&gt;

&lt;h4 id=&quot;get&quot;&gt;GET&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;URL에 해당하는 정보의 전송요청&lt;/li&gt;
  &lt;li&gt;데이터가 URL에 노출&lt;/li&gt;
  &lt;li&gt;Encoding/Decoding 과정이 없기 때문에 POST보다 빠르다.&lt;/li&gt;
  &lt;li&gt;URL의 길이 제약으로 많은 데이터 전송은 무리&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;post&quot;&gt;POST&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;FORM에서 POST 지정하는 경우&lt;/li&gt;
  &lt;li&gt;데이터는 HTTP Bodt에 숨겨서 Server로 전송&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;put&quot;&gt;PUT&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;URI로 지정한 서버에 있는 파일을 대치한다.&lt;/li&gt;
  &lt;li&gt;URI로 지정한 파일이 없는 경우는 파일을 새로 작성한다.&lt;/li&gt;
  &lt;li&gt;보안적으로 위험, 비활성화 시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;head&quot;&gt;HEAD&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;GET과 동일하나 HTTP Header 정보만 요청&lt;/li&gt;
  &lt;li&gt;네트워크 대역을 절약, 리소스의 크기 확인시 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;delete&quot;&gt;DELETE&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;URI로 지정한 서버에 있는 파일을 삭제한다.&lt;/li&gt;
  &lt;li&gt;보안적으로 위험, 비활성화&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;options&quot;&gt;OPTIONS&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;어떤 HTTP Method를 지원하는지 검사&lt;/li&gt;
  &lt;li&gt;요청한 URL에 어떤 메소드 요청이 가능한지 확인&lt;/li&gt;
  &lt;li&gt;보안적으로 위험, 해커들에게 중요한 정보를 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;trace&quot;&gt;TRACE&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Server측에서 받은 Requst Line과 Header를 그대로 Client로 반송한다.&lt;/li&gt;
  &lt;li&gt;Proxy Server등을 쓰는 혼경에서 Request가 바뀌어도 써지는 모양을 살펴볼 떄 사용&lt;/li&gt;
  &lt;li&gt;Request의 Loopback 테스트용으로 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;connect&quot;&gt;CONNECT&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;터널링의 목적으로 연결요청&lt;/li&gt;
  &lt;li&gt;Forward Proxy에 HTTP TLS(Transport Layer Security) 터널링(Tunneling)을 요청할 떄 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-2-http의-구조&quot;&gt;1-2. HTTP의 구조&lt;/h2&gt;

&lt;p&gt;HTTP의 구조는 request / response로 나누어서 볼 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;http-request-structure&quot;&gt;HTTP Request Structure&lt;/h4&gt;
&lt;h5 id=&quot;start-line&quot;&gt;Start Line&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 요청의 시작줄&lt;/li&gt;
  &lt;li&gt;구성요소 : HTTP Method / Request target / HTTP version&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;header&quot;&gt;Header&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 요청 그 자체에 대한 정보를 담고 있다.
자주 사용되는 Header&lt;/li&gt;
  &lt;li&gt;HOST : 요청이 전송되는 target의 호스트 URL 주소&lt;/li&gt;
  &lt;li&gt;User-Agent : Client의 정보&lt;/li&gt;
  &lt;li&gt;Accept : 해당 요청이 받을 수 있는 response body data type&lt;/li&gt;
  &lt;li&gt;Content-Type : Message Body의 Type을 알려주며 Accept Header와 마찬가지고 MIME type 사용&lt;/li&gt;
  &lt;li&gt;Content-Length : Request가 보내는 Message Body의 총 사이즈&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;body&quot;&gt;Body&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP Request가 전송하는 데이터를 담고 있는 부분&lt;/li&gt;
  &lt;li&gt;전송하는 데이터가 없으면 Body는 비어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;http-response-structure&quot;&gt;HTTP Response Structure&lt;/h4&gt;
&lt;h5 id=&quot;status-line&quot;&gt;Status Line&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP Reponse Message 상태를 간략히 요약해주는 부분&lt;/li&gt;
  &lt;li&gt;HTTP version, Status Code, Status Text로 나타남&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;header-1&quot;&gt;Header&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP Request Header와 동일&lt;/li&gt;
  &lt;li&gt;단, Response시에는 User-Agent 대신 Server가 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;body-1&quot;&gt;Body&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP Request Message Body와 동일&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-https&quot;&gt;2. HTTPS&lt;/h1&gt;
&lt;p&gt;위에서는 HTTP에 대해서 알아봤습니다. 그러면 HTTPS는 무엇일까요? HTTP에서 S만 추가된 HTTPS에 대해 보겠습니다.&lt;/p&gt;

&lt;p&gt;HTTPS는 Hyper Text Transfer Protocol Secure의 약자이다. HTTP에서 Secure이 추가된 형태이다. 그렇다면 보안이 강화된 HTTP라는 느낌이 온다. HTTP는 암호화되지 않은 방법으로 데이터를 전송하기 때문에 서버와 클라이언트가 주고 받는 메시지를 감청하는 것이 매우 쉬운데 이를 보안한 것이 HTTPS이다.&lt;/p&gt;

&lt;p&gt;HTTPS는 HTTP 계층 아래의 SSL 서브 계층에서 사용자 페이지 요청 인증과 공개키와 비밀키에 기반한 암호화를 위해 Netscape Communications 에서 개발했다.&lt;/p&gt;

&lt;p&gt;HTTP에 중점을 두려 했기때문에 HTTPS는 여기까지만 보겠다. 다음부터는 HTTP의 비연결성은 해결해주는 WebSocket에 대해 보겠습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Oct 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/10/17/http/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/17/http/</guid>
        
        <category>WEB</category>
        
        <category>HTTP</category>
        
        
      </item>
    
      <item>
        <title>[Java] Class.forName()에 대해서</title>
        <description>&lt;h2 id=&quot;1-들어가며&quot;&gt;1. 들어가며&lt;/h2&gt;

&lt;p&gt;Java pattern을 공부하며 source code 중에서 이해가 안됬던 부분이 있었습니다. 바로 아래의 부분입니다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Class.forName을 처음 보는 것은 아닙니다. 바로 JDBC에서 봤었습니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oracle.jdbc.driver.OracleDriver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 부분이다!
사실 기존에 이 코드를 작성할 때는 정해진 관례처럼 사용했었습니다. 그러다가 이번에 공부를하며 다시 등장하여 혼란스럽게 만든 것 입니다. 그렇다면 이 Class.forName이 무엇인지 알아보자!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-java-reflection&quot;&gt;2. Java Reflection&lt;/h2&gt;
&lt;p&gt;Class.forName()은 사실 자바 리플렉션 API(Java Reflection API)의 일부입니다. 자바 리플렉션 API란 간단히 말해서
&lt;strong&gt;구체적인 클래스의 타입을 알지 못해도 클래스의 변수 및 메소드 등에 접근하게 해주는 API&lt;/strong&gt;입니다.(동적 바인딩)&lt;/p&gt;

&lt;p&gt;Reflection은 실행중인 자바프로그램 내부를 검사하고 내부의 속성을 수정할 수 있도록 해줍니다.
그런데 여기에서 한가지드는 의문점이 있습니다. 구체적인 클래스 타입을 알지 못하는데 어떻게 접근할 수 있을까요?&lt;/p&gt;

&lt;p&gt;그 이유는 자바의 클래스파일들은 바이트코드로 컴파일되어 static과 함께 method영역에 저장되어 집니다. 때문에 클래스 이름만 알면 클래스의 정보를 찾을 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;자바 리플렉션은 동적 바인딩 이라고도 하는데 Runtime에 타입이 정해진다는 말입니다. 그렇다면 어떻게 사용하는지 코드를 통해 알아봅시다.&lt;/p&gt;

&lt;h2 id=&quot;3-example&quot;&gt;3. Example&lt;/h2&gt;

&lt;p&gt;예시에서는 Command pattern에서 사용한 코드의 일부분을 이용하겠습니다!&lt;br /&gt;
(Java pattern글을 안보고 오셨다면 여기로! (&lt;a href=&quot;https://jongminlee0.github.io/2019/06/27/command/&quot;&gt;Jave EE 패턴&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FrontController.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmdMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmdClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalAccessException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstantiationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Class not found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 &lt;strong&gt;try&lt;/strong&gt;문 내부를 보게 되면 동적바인딩이 사용된 것을 볼 수 있습니다.&lt;br /&gt;
Class.forName(cmdClass)에서 cmd클래스는 mapping에서 어떠한 것을 가져오고 있습니다. cmdMppaing 객체는 Properties파일에 저장된 url경로를 가져오는 역할을 합니다. 그렇다면 왜 사용되었는지 어느정도 짐작이 가실 겁니다. Client로 부터 오는 요청 url은 한개만 존재하는 것이 아니라 여러개가 존재합니다. 우리가 모든 요청에 대해서
응답할 수 있도록 모든 경우를 코드로 작성한다면 정말 비효율적일 것입니다. 또한 추후에 유지보수에 어려움이 따를 것 입니다.&lt;/p&gt;

&lt;p&gt;그러나 동적방인딩을 이용한다면 각각의 url에 대해서 직접 대응하지 않고, runtime시 결정된 클래스에 대응하게 만든다면 효율적이고 유지보수가 쉬운 코드를 작성할 수 있을 것 입니다.&lt;/p&gt;

&lt;h2 id=&quot;4-글을-마치며&quot;&gt;4. 글을 마치며&lt;/h2&gt;

&lt;p&gt;사실 Java Reflection에는 Class.forName()말고도 만은 메서드가 존재합니다. 그러나 이번 글에서는 저의 궁금점인 Class.forName()에 대해서만 다루었습니다.
나중에 기회가 된다면 Java Reflection에 대해 더 자세히 알아보겠습니다. 감사합니다!!&lt;/p&gt;

&lt;h2 id=&quot;5-reference&quot;&gt;5. Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://kmongcom.wordpress.com/2014/03/15/자바-리플렉션에-대한-오해와-진실/&lt;/li&gt;
  &lt;li&gt;https://kaspyx.tistory.com/80&lt;/li&gt;
  &lt;li&gt;https://gyrfalcon.tistory.com/entry/Java-Reflection&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 29 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/06/29/reflection/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/29/reflection/</guid>
        
        <category>Java</category>
        
        <category>Servlet</category>
        
        <category>Class</category>
        
        
      </item>
    
      <item>
        <title>[Servlet] Jave EE 패턴</title>
        <description>&lt;h1 id=&quot;java-ee-패턴&quot;&gt;Java EE 패턴&lt;/h1&gt;

&lt;p&gt;Java EE 패턴은 자바 기반의 엔터프라이즈 웹 애플리케이션 개발을 위한 패턴입니다. 
어디선가 들어본 ValueObject, DataAcessObject 등은 모두 Java EE패턴에서 나온 용어들 입니다. Java EE패턴에는 여러가지 패턴이 있는데 어떤 패턴이 있는지 먼저 알아봅시다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-java-ee-패턴-목록&quot;&gt;1. Java EE 패턴 목록&lt;/h2&gt;
&lt;h4 id=&quot;1-intercepting-filter&quot;&gt;1) Intercepting Filter&lt;/h4&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;요청에 대한 전처리 및 후처리&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;요구사항에 대해서 전처리와 후처리에 대한 솔루션을 제공하고 이를 통해 유동적인 아키텍처를 가능하게 합니다.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&quot;2-front-controller&quot;&gt;2) Front Controller&lt;/h4&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;요청에 대한 처리를 관리하는 중앙 컨트롤러&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;프레젠테이션 레이어에 일어나는 일들의 창구로 facade 패턴의 역할과 MVC패턴에서 controller의 역할을 함으로써 보안, 뷰 관리, 탐색들을 관리합니다.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&quot;3-view-helper&quot;&gt;3) View Helper&lt;/h4&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;뷰의 표현을 위해 비즈니스 로직을 가지고 있는 개념상의 Helper&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;비즈니스 로직과 프레젠테이션 로직의 결합도를 낮추기 위해 사용합니다.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&quot;4-composite-view&quot;&gt;4) Composite View&lt;/h4&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;레고 블럭 같은 작은 뷰들을 조합해서 만드는 전체의 뷰&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;복잡한 뷰를 만들기 위해서 기본적인 뷰 레이어를 융통성 있게 하고, 개인화 영역과 커스터마이징을 보다 수월하게 합니다.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&quot;5-service-to-worker&quot;&gt;5) Service to worker&lt;/h4&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;Front Controller와 View Helper Pattern을 이용해 dispatcher 컴포넌트를 구성&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;대규모 애플리케이션에서 이용되는 기법으로 뷰에 대한 처리 이전에 동작합니다.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&quot;6-dispatcher-view&quot;&gt;6) Dispatcher View&lt;/h4&gt;
&lt;p&gt;Service to Worker와 동일하며 차이점은 뷰에 대한 처리 중에 수행되어야 하고, 작은 시스템에서 더 안정적입니다.&lt;/p&gt;

&lt;p&gt;Command 패턴에 앞서 대부분의 웹 프레임워크에서 차용하고 있는 Front Controller 패턴에 대해서 알아보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-front-controller-1&quot;&gt;2. Front Controller&lt;/h2&gt;

&lt;p&gt;Front Controller 패턴은 컨트롤러가 공통 요청을 먼저 수행하고 뷰를 호출하는 패턴입니다.
&lt;img src=&quot;/img/FrontController.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;요청에 대해서 컨트롤러가 응답하고, 결과에 따라 서블릿이나 JSP로 만든 뷰를 보여주게 됩니다. 서버 측에서 메서드를 사용하여 화면을 전환하는 방법에는 두 가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Response 객체의 sendRedirect 메서드&lt;/li&gt;
  &lt;li&gt;RequestDispatcher 객체의 forward 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sendRedirect는 속성을 저장할 수 없고 다른 로직을 추가할 수 없습니다. 반면에 forward 메서드는 서버 내부에서만 흐름이 이동하므로 속성을 저장할 수 있고, 브라우저(클라이언트)에게 바로 전달하지 않고 원하는 작업을 처리한 후에 응답을 전환할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;1-sendredirect&quot;&gt;1) sendRedirect&lt;/h4&gt;
&lt;p&gt;sendRedirect 메서드는 HttpServletResponse에 속한 메서드인데 다음과 같이 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;경로&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-forward&quot;&gt;2) forward&lt;/h4&gt;
&lt;p&gt;forward 메서드를 사용하기 위해서는 requestDispatcher 객체를 생성해야 합니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;경로&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 requestDispatcher 객체의 경로는 절대경로로 지정해야 됩니다. 다음은 Front Controller를 이용한 분기처리의 모습입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;write&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컨트롤러에서 화면에 보여 주는 구문은 위와 같이 if문으로 분기처리하게 되는데, 이렇게 직접적으로 forward메서드를 사용하게 될 경우
URL이 변경되거나 뷰가 변경될 때마다 컨트롤러를 변경하게 되어서 추후에 유지보수가 어려워집니다. 이럴 때는 Command pattern을 이용해서 복잡도를 낮출 수 있습니다.
그러면 이제 Command pattern에 대해서 알아보자!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-command-pattern&quot;&gt;3. Command Pattern&lt;/h2&gt;

&lt;p&gt;커맨드 패턴은 명령(로직)을 객체 안에 캡슐화해서 저장함으로써 컨트롤러와 같은 클래스를 수정하지 않고 재사용할 수 있게 하는 패턴입니다.
&lt;img src=&quot;/img/Command.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Invoker역할은 컨트롤러가 담당합니다. 아래의 Command pattern의 예시를 보자&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getReq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forward Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;servlet Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setReq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servletContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;커맨드 클래스는 abstract로 만들었습니다. 서블릿 클래스가 아니므로 HttpServletRequset와 httpServletResponse를 변수로 선언하여
getter와 setter메소드를 만들었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FrontController.java (Servlet)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.annotation.WebInitParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.annotation.WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/controller&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@WebInitParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mapping&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/command.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrontController&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmdMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mapping&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cmdMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cmdMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I/O Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmdClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmdClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalAccessException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstantiationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Class not found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;doGet 메서드는 command객체로 사용될 클래스의 이름을 입력 받은 후 리플랙션을 이용해서 인스턴스를 생성하고 execute 메서드를 호출합니다.
execute메서드는 입력받은 파라미터와 뷰 클래스들을 매칭해서 응답을 전달하는 역할을 합니다. 뷰 클래스들의 패키지 위치 정보는 command.properties 파일로 관리합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;ServletConfig : 하나의 Servlet에서 사용합니다.(config 객체라고도 하면 Servlet당 하나 존재합니다.) get메소드만 지원하여 Read-only입니다.
init()메서드를 호출하여 초기화된 parameter를 ‘name / value’형식으로 읽습니다.&lt;/li&gt;
    &lt;li&gt;ServletContext : servlet과 jsp에서 모두 접근가능하며 전체(JVM)에서 한 개만 존재합니다.&lt;br /&gt;
위의 둘다 Servlet에 상속되어 있어 다른 선언없이 바로 get() 이 가능합니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;properties파일은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;command.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;py&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;command.pattern.HomeView&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;command.pattern.listView&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;command.properties 파일은 입력된 파라미터가 view 클래스들과 연결되도록 하는 역할을 합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;properties 파일은 key / value 형태로 데이터를 저장하는 설정 파일 입니다.
위의 코드중 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmdMapping.load(is)&lt;/code&gt;를 보면 properties파일에서 key / value를 읽어들여 key / value형태로 저장하는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;HomeView.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;HomeView 클래스는 Command를 상속받아서 home.jsp로 리퀘스트를 forwarding합니다. 브라우저에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080/controller?cmd=home&lt;/code&gt;을 입력하고 
결과를 확인해 보면 home.jsp에 작성한 내용이 출력됩니다.&lt;/p&gt;

&lt;p&gt;페이지 경로를 모르더라고 cmd 파라미터에 따라서 페이지로 이동됩니다. 지금까지 클래스들의 흐름을 정리해보면 다음과 같습니다.
&lt;img src=&quot;/img/FrontCommand.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모든 요청은 FrontController 클래스가 받습니다. HomeView는 Command 클래스를 상속받았고 요청 파라미터가 Home인 경우 homew.jsp를 호출합니다.
이와 같이 프론트 컨트롤러 패턴은 뷰 페이지 요청을 한 곳에서 관리할 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-글을-마치며&quot;&gt;4. 글을 마치며&lt;/h2&gt;
&lt;p&gt;기존에 미니 프로젝트를 진행하면서 Front Controller를 if문을 이용한 분기처리로 작성하였습니다. 코드작성도 간결하고 코드의 흐름이 간단해 보였기 때문에
괜찮은 방식이라 생각했습니다. 그러나 Command pattern에 대해 공부하며 기존에 작성하던 방식의 단점을 보았습니다. 또한 Command pattern을 사용함으로써 오는
장점이 더욱 크다는 것을 확인하였습니다. 짧게 작성하는 코드가 나중에 더욱 큰 프로젝트가 되었을때 좋지만은 않다는 것을 느꼈습니다.
각각의 프로젝트에 알맞는 방식으로 작성하는 것이 가장 좋은 방법이라고 생각합니다. 프로젝트를 진행하기에 앞서 어떠한 패턴으로 진행할지 먼저 결정한 후 진행하는 것이 중요하다고 생각합니다. 부족하지만 긴 글을 읽어주셔서 감사합니다!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-reference&quot;&gt;5. Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 부트로 배우는 자바 웹개발 / 윤석진&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/06/27/command/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/27/command/</guid>
        
        <category>Java</category>
        
        <category>Servlet</category>
        
        
      </item>
    
      <item>
        <title>[Java] Static 완전정복!! (2)</title>
        <description>&lt;h1 id=&quot;들어가며&quot;&gt;들어가며&lt;/h1&gt;

&lt;p&gt;저번 글에서는 static에 대해 간단하게 알아보았습니다.
(안보고 오셨다면 여기로! -&amp;gt; &lt;a href=&quot;http://JongMinLee0.github.io/2019/06/15/static1/&quot;&gt;static 완전정복(1&lt;/a&gt;))&lt;/p&gt;

&lt;p&gt;지금까지의 내용을 요약해보자면 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로그램이 실행될 때 Java메모리에 할당되며, 프로그램이종료될 때 해체된다.&lt;/code&gt;
또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;main메소드에서 사용하는 이유는 JVM에 편의를 제공하기 위함&lt;/code&gt;이라 할 수 있겠습니다.&lt;/p&gt;

&lt;p&gt;이번에는 static을 사용하는 다양한 경우에 대해 보겠습니다!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;static초기화-블록initailization-block&quot;&gt;Static초기화 블록(Initailization BLock)&lt;/h2&gt;
&lt;h2 id=&quot;static-변수variables&quot;&gt;Static 변수(Variables)&lt;/h2&gt;
&lt;h2 id=&quot;static-메소드&quot;&gt;Static 메소드&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/java-static-keyword1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이들은 클래스의 static 멤버 또는 구성요소 입니다. 이들은 액세스 하기 위해서 객체를 만들 필요가 없습니다.
즉, 직접 클래스의 이름을 사용하여 액세스 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Static 초기화 블록은 Static 변수만을 초기화하는 이름없는 블록입니다. 다음과 같은 형태를 가집니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Set of Statements&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;아래의 코드를 보며 이들의 동작을 자세히 알아 봅시다!!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StaticComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticVariables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StaticComponents SIB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;staticVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;From StaticMethod&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staticVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainClass SIB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Static Members directlyaccessed with Class Name&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StaticComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;staticVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StaticComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;staticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;1단계&quot;&gt;1단계&lt;/h4&gt;

&lt;p&gt;Java MainClass 를 트리거하면 Java명령은 할당된 메모리를 Stack과 Heap으로 나누게 됩니다. 자바 명령어는 Stack메모리에 들어가 실행되며, MainCalss가 heap메모리에 있는지 없는지 확인합니다.
만약 heap에 없다면 load하는 작업을 수행합니다.
그렇게 되면 MainClass는 무작위로 조금의 메모리를 할당받게 됩니다. 이것을 Class Memory라 부릅니다.
모든 static멤버는 이 Class메모리에 load됩니다. MainClass 안에는 오직 하나의 static 메소드(main)만 있기 때문에 이것을 MainClass의 Class메모리에 load시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2단계&quot;&gt;2단계&lt;/h4&gt;

&lt;p&gt;모든 static 멤버를 load한 후 정적 초기화 블록(SIB: Static Initailization Blocks)이 실행됩니다. 이들은 임무를 수행한 후 저장되지 않습니다. 다음을 보면 확실하게 알 수 있습니다!&lt;/p&gt;

&lt;p&gt;Main()메소드를 로드한 후 MainClass의 SIB는 실행을 위해 Stack에 들어갑니다. 여기서 SIB에는 하나의 문장만 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainClass SIB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 부분을 실행해서 ‘MainClass SIB’를 콘솔창에 띄운 후 Stack메모리에서 벗어납니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3단계&quot;&gt;3단계&lt;/h4&gt;

&lt;p&gt;이제 java command(자바 명렁어)는 실행을 위해 main메소드를 호출합니다.(main메소드가 스택에 들어갑니다.)
가장 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;StaticComponents.staticVariable=20;&lt;/code&gt; 가 실행됩니다.
여기서 먼저 StaticComponents 클래스가 메모리에 load되었는지 확인합니다.
load되어 있지 않으면 먼저 load작업을 수행합니다. 임의의 메모리가 StaticComponents클래스에 할당되면 StaticComponents의 모든 정적 멤버(변수, 메소드)가 Class 메모리에 load됩니다. StaticVariable은 전역변수이고 기본값은 0(초기화)으로 할당됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4단계&quot;&gt;4단계&lt;/h4&gt;

&lt;p&gt;StaticComponents의 모든 static 멤버를 load하면 SIB가 실행됩니다. 마찬가지로
StaticComponents클래스의 SIB가 실행을 위해 Static에 들어갑니다. 가장 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println(&quot;StaticComponents SIB&quot;);&lt;/code&gt;가 실행됩니다.
콘솔에 ‘StaticComponents SIB’을 띄운 후 staticVariable에 10이라는 값을 넣어 줍니다. 이제 다른 명령문이 없으므로 스택 메모리에 남겨 둡니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5단계&quot;&gt;5단계&lt;/h4&gt;

&lt;p&gt;이제 main()메소드로 돌아옵니다. 이제 staticVariable변수에 20의 값을 할당해주는 명령이 실행됩니다.
그 다음 staticMethod()를 호출합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6단계&quot;&gt;6단계&lt;/h4&gt;

&lt;p&gt;호출된 staticMethod()는 실행을 위해 stack에 들어갑니다. 첫 번째 문장을 수행하여 콘솔에 ‘From staticMethod’을 출력한 후 staticVariable의 값 20을 출력합니다.
더 이상 명령문이 남아 있지 않기 때문에 stack을 떠납니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;7단계&quot;&gt;7단계&lt;/h4&gt;

&lt;p&gt;다시 main()으로 돌아오면 더이상 수행할 명령어가 남아있지 않습니다. 따라서 main()메소드와 java command는 stack을 떠납니다.&lt;/p&gt;

&lt;p&gt;위의 과정을 그림으로 나타내면 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/static.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출력순서는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;MainClass SIB
StaticComponents SIB
From StaticMethod
20
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;
&lt;p&gt;사실 Static은 이보다 더 많은 곳에 사용이 됩니다. 예를 들어 final을 활용하거나,
import할 때도 사용이 됩니다. 그러나 지금까지의 글을 알고 있다면 어느 곳에서 사용이 되도 
이 붙은 static이 무엇을 의미하는지, static이 붙음으로써 변수, 메소드가 어떠한 의미를 갖게 되는지 알 수 있을 것입니다. 부족한 글이지만 읽어주셔서 감사합니다!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;
&lt;p&gt;이미지 : https://www.javatpoint.com/static-keyword-in-java&lt;/p&gt;

&lt;p&gt;https://javaconceptoftheday.com/static-members-java/&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/06/15/static2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/15/static2/</guid>
        
        <category>Java</category>
        
        <category>Static</category>
        
        
      </item>
    
      <item>
        <title>[Java] Static 완전정복!! (1)</title>
        <description>&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;Java를 처음 접하고 가장 먼저 적었던 코드가 있습니다. 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;public static void main(String[] args)&lt;/code&gt;입니다.&lt;/p&gt;

&lt;p&gt;책으로나 youtube로 공부할 때도 가장 앞부분에 나와 시작부터 당황시켰던 녀석입니다.
그러나 일단 저렇게 시작을 한다 알아두기만 하라고 해서 넘어갔던 부분이기도 하죠…&lt;/p&gt;

&lt;p&gt;이 후 Java를 공부하면서 static 이라는 단어가 심심치 않게 나오며 여러부분에서 사용되는 것을 볼 수 있었습니다. 또한 많은 곳에 설명이 되어 있지만 이해하기 어려운 글이 많기도 합니다.
도대체 이 static이 뭔지 나름대로 정리해봤습니다!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-main-method&quot;&gt;1. main() method&lt;/h2&gt;

&lt;p&gt;처음 접하는 코드가 위에 말했던 것처럼 main method에서의 static 입니다. 그렇다면 먼저
main method에 대해 알아봅시다.&lt;/p&gt;

&lt;p&gt;Java에서 main() method는 JVM(Java Virtual Machine)의 Java 프로그램 진입점입니다. 그말인 즉, JVM은 main()메소드를 호출하여 자바 프로그램을 시작한다는 것 입니다.
(&lt;a href=&quot;https://jongminlee0.github.io/2019/06/13/jvm/&quot;&gt;JVM이란?&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-static&quot;&gt;2. Static&lt;/h2&gt;

&lt;p&gt;static은 keyword입니다. 메서드 및 변수 앞에 static을 추가하면 instance 메소드 및 변수 대신
class 메소드 및 class 변수가 각각 만들어 집니다.
따라서 static 메소드 및 변수는 Class를 사용하여 직접 액세스 할 수 있습니다. 즉 static
메소드 또는 변수를 액세스 하기 위해 객체를 생성할 필요가 없다는 말입니다.&lt;/p&gt;

&lt;p&gt;다른 말로 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로그램이 실행될 때 Java 메모리에 할당되며, 프로그램이 종료될 때 해제된다.&lt;/code&gt;라 말할 수 있습니다. 어떤 말인지 이해하기 힘든 부분들이 있으니 밑에서 코드를 보며 확인해 보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-static-method&quot;&gt;(1) static method&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//static function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Calling a static function&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메소드가 static키워드로 선언되면 이를 static 메소드(정적메소드)라고 합니다. Test.func()과 같이 개체를 참조하지 않고 액세스 할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;2-static-main-method&quot;&gt;(2) static main method&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에는 일반적인 main메소드 입니다. 이 main메소드에는 왜 static이 필요한지 봅시다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;static main메소드는 JVM이 Java Application을 시작하기 위해 JVM을 호출하는 것을 명확하게 합니다. 그렇지 않으면 JVM이 응용프로그램을 시작하기 위해 각 Java응용프로그램 빌드에 대한 항목을 지정해야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 static main메소드는 정적(static)인데 그렇지 않으면 생성자를 호출해야하는 모호성이 있기 때문입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 &lt;strong&gt;모호성&lt;/strong&gt;에 대해 잠시 보겠습니다!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 살펴봅시다. JVM은 새로운 &lt;strong&gt;Test(int t)&lt;/strong&gt; 를 호출해야하는지 여부를 경정하는 모호성 상태에 들어갑니다.
그렇다면 t에 어떤 값을 전달해야 할까요? 그렇지 않다면 생성자를 실행하지 않고 JVM이 Test를 인스턴스화 해야 할까요?&lt;/p&gt;

&lt;p&gt;진입점이 호출되기 전에 JVM이 클래스를 인스턴스화 해야하는 것은 너무많은 edge case와 모호성이 있습니다. 이것이 main메소드가 static(정적)인 이유입니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;edge case란?
알고리즘이 처리하는 데이터의 값이 알고리즘의 특성에 따른 일정한 범위를 넘을 경우에 발생하는 문제를 가리킨다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또 한가지, main메소드가 static이므로써 JDK(Java Development Kit)에 편의를 제공해 줍니다.
만약 main메소드가 static이 아니라면 여러 IDE에서 프로젝트의 ‘실행가능한’ 클래스를 자동감지하는 것이 더욱 어려워 집니다.
따라서 관례적으로 메인 메소드를 ‘public static void main(String[] args)’로써 사용하는 것 입니다.&lt;/p&gt;

&lt;p&gt;여기까지가 main메소드에서의 static이었습니다. 다음에는 static에 대해 더 자세히 알아봅시다!!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/06/15/static1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/15/static1/</guid>
        
        <category>Java</category>
        
        <category>Static</category>
        
        
      </item>
    
      <item>
        <title>[Java] JVM이란 ?</title>
        <description>&lt;h1 id=&quot;jvm&quot;&gt;JVM&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;JVM(Java Virtual Machine)&lt;/strong&gt;은 Java를 다루는 사람이라면 실력을 막론하고 들어본 이름입니다.
바로 Java 언어의 특징 중 ‘운영체제(OS / platform)에 독립적이다’의 주인공입니다.
사실 저는 JVM 자바 가상 머신 즉, 가상으로 자바 코드를 돌리기 때문에 독립적이다라고만 알고 있엇고, 그 안에 메모리가 있는지 조차 알지 못했습니다. 때문에!! 이번에 확실하게 JVM에 대해 알아보고자 합니다!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-정의&quot;&gt;1. 정의&lt;/h2&gt;

&lt;p&gt;JVM은 다른 프로그램을 실행하는 것을 목적으로 하는 프로그램 입니다. 즉, Java코드에 있는
main메소드를 실제로 호출하는 것 입니다.
JVM은 두 가지의 기본 기능이 있습니다. 첫 번째는 Java 프로그램이 모든 장치 또는 운영체제에서 실행되도록 허용하는 기능, 두 번재는 프로그램 메모리를 관리하고 최적화 하는 기능입니다. &lt;br /&gt;
정리하자면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;기술적 정의&lt;/strong&gt; : JVM은 코드를 실행하고 해당 코드의 런타임 환경을 제공하는 소프트웨어 프로그램 사양(specification)입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;일상적인 정의&lt;/strong&gt; : JVM은 Java 프로그램을 실행하는 방법입니다. JVM의 설정을 구성한 다음 실행 중에 프로그램 리소스를 관리 하는데 의존합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일반적으로 개발자가 JVM에 관해 이야기 한다면 Java app의 리소스 사용을 나타내고 제어하는 시스템, 특히 서버에서 실행되는 프로세스를 의미 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-구조&quot;&gt;2. 구조&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/JVM.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-class-loader&quot;&gt;(1) Class Loader&lt;/h3&gt;
&lt;p&gt;클래스 로더란 runtime에 Class를 로딩하게 해주는 기술입니다. Java의 모든 것이 Class이며, 모든 Java애플리캐이션은 Class로 구성됩니다. 
응용 프로그램은 하나 또는 수천개의 클래스로 구성될 수 있습니다. Java 애플리케이션을 실행하려면 JVM은 컴파일된 .class파일을 액세스 할 수 있는 서버와 같은 Context에 load해야 합니다. 
따라서 JVM은 클래스 로더에 의존하여 기능을 수행합니다.&lt;/p&gt;

&lt;p&gt;클래스 로더의 핵심 적인 기능은 3가지 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Loading&lt;/li&gt;
  &lt;li&gt;Linking&lt;/li&gt;
  &lt;li&gt;Initialization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 3가지 기능을 하나하나 알아봅시다!!&lt;/p&gt;

&lt;h4 id=&quot;1-1-loading&quot;&gt;(1-1) Loading&lt;/h4&gt;
&lt;p&gt;클래스 로드는 .class 파일을 읽고 해당 byte data를 생성한 다음 method영역에 저장합니다.
각 .class파일에 method영역 정보를 저장합니다. 이 정보에는 다음과 같은 것들이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.class파일이 class 또는 interface, Enum과 관련이 있는지 여부&lt;/li&gt;
  &lt;li&gt;load된 class 및 부모 클래스의 정규화된 이름&lt;/li&gt;
  &lt;li&gt;modifier, variable, method의 정보 등등..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.class 파일을 로드 한 후 JVM은 Class 유형의 객체를 생성하여 힙 메모리에 저장합니다.
이 객체는 java.lang 패키지에 미리 정의된 Class 유형입니다. 이 Class 객체는 사용자가 정보를 얻는 과정에 많은 편의를 제공해 줍니다.
만약 이 객체의 참조를 얻으려면 getClass( ) 메소드를 사용하여 얻을 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;1-2-linking&quot;&gt;(1-2) Linking&lt;/h4&gt;
&lt;p&gt;verification(확인), preparation(준비), resolution(해결)을 수행합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;verification&lt;/strong&gt; : 
.class파일의 정확성을 보장합니다. 이 파일의 형식이 올바른지, 유효한 컴파일러에 의해 생성되었는지를 확인합니다.
    &lt;blockquote&gt;
      &lt;p&gt;확인에 실패하면 런타임 에러 발생 (java.lang.VerifyError)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;preparation&lt;/strong&gt; :
클래스 변수에 메모리를 할당하고 메모리를 기본값으로 초기화 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;resolution&lt;/strong&gt; :
직접참조(direct reference)를 기호참조(symbolic reference)로 바꾸는 프로세스 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-3-initialization&quot;&gt;(1-3) Initialization&lt;/h4&gt;
&lt;p&gt;초기화 단계에서 모든 static 변수는 클래스 위의 계층(부모)부터 아래 계층(자식)순으로 정의된 값을 지정 받습니다.&lt;/p&gt;

&lt;h4 id=&quot;1-4-class-loader&quot;&gt;(1-4) Class Loader&lt;/h4&gt;
&lt;p&gt;Java Class Loader는 기본 클래스 로더가 3가지 있다. 간단하게 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/classLoader.JPG&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-bootstrap-class-loader&quot;&gt;(1) Bootstrap class loader&lt;/h4&gt;
&lt;p&gt;모든 JVM은 반드시 bootstrap class loader를 가지고 있어야 하며, 신뢰있는 클래스를 
로드 할 수 있어야 합니다. 핵심 Java API 클래스를 로드해 줍니다.(Java_Hoome/jre/lib)&lt;/p&gt;

&lt;h4 id=&quot;2-extension-class-loader&quot;&gt;(2) Extension class loader&lt;/h4&gt;
&lt;p&gt;bootstrap class loader의 자식 입니다. 확장 디렉토리(Java_Home/jre/lib/ext)
또는 java.ext.dirs 시스템으로 지정된 다른 디렉토리에 있는 클래스를 로드 합니다.&lt;/p&gt;

&lt;h4 id=&quot;3-systemapplication-class-loader&quot;&gt;(3) System/Application class loader&lt;/h4&gt;
&lt;p&gt;Extension class loader의 자식입니다. 내부적으로 java.class.path에 매핑된 환경 변수를 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-jvm-메모리&quot;&gt;2. JVM 메모리&lt;/h2&gt;
&lt;p&gt;이번에는 JVM 메모리 영역에 대해서 알아보겠습니다.(구조에 있는 그림을 참고해주세요!!!)&lt;/p&gt;

&lt;h3 id=&quot;1-method-area&quot;&gt;(1) Method area&lt;/h3&gt;
&lt;p&gt;static 변수를 포함하여 class 이름, 메소드 및 변수 정보 등 모든 클래스 레벨의 정보가
저장됩니다. JVM에는 단 하나의 메소드 영역이 있는며, 이는 공유자원(shared resource)입니다.&lt;/p&gt;

&lt;h3 id=&quot;2-heap-area&quot;&gt;(2) Heap area&lt;/h3&gt;
&lt;p&gt;모든 객체(Object)의 정보를 저자아고 있습니다. 이 또한 하나만 존재하며 공유자원 입니다.&lt;/p&gt;

&lt;h3 id=&quot;3-stack-area&quot;&gt;(3) Stack area&lt;/h3&gt;
&lt;p&gt;Method 내에서 사용되는 값들(매개변수, 지역변수, 리턴값 등)이 저장되는 구역으로 메소드가
호출할때 LIFO(Last In Frist Out)로 하나씩 생성되고, 메소드 실행이 완료되면
LIFO형식으로 하나씩 지워집니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;각 Thread별로 하나씩 생성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-pc-resister&quot;&gt;(4) PC Resister&lt;/h3&gt;
&lt;p&gt;현재 실행중인 스레드(thread)의 주소를 저장합니다. 각 thread별로 별도의 PC register를 
가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;5-native-method-statcks&quot;&gt;(5) Native Method Statcks&lt;/h3&gt;
&lt;p&gt;Java외 언어로 작성된 Native 코드를 위한 메모리 입니다. C / C++ 등의 코드를 수행하기위한
스택입니다.&lt;/p&gt;

&lt;p&gt;그 외&lt;/p&gt;

&lt;h3 id=&quot;6-excution-engine&quot;&gt;(6) Excution Engine&lt;/h3&gt;
&lt;p&gt;클래스 로더가 로드 작업을 완료하면 JVM은 각 클래스의 코드를 실행하기 시작합니다. 실행 엔진은
이 처리를 수행합니다. .class(바이트코드)를 실행하여 한줄씩(interperter) 바이트코드를 읽습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;실행엔진은 3부분으로 분류할 수 있습니다.
Interperter, JIT(Just-In-Time Compiler, GC(Garbage Collection))&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;참고) JIT는 인터프리터의 효츌성을 높이는데 사용됩니다. 인터프리터방식과 컴파일러 방식을 혼합한 것으로 생각할 수 있습니다.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;7-jnijava-native-method-interface&quot;&gt;(7) JNI(Java Native Method Interface)&lt;/h3&gt;
&lt;p&gt;Native Method Library와 상호작용하고 실행에 필요한 Native Libarary(C, C++)를 제공하는 인터페이스 입니다.&lt;/p&gt;

&lt;h3 id=&quot;8-native-method-libraries&quot;&gt;(8) Native Method Libraries&lt;/h3&gt;
&lt;p&gt;Execution Engine에 필요한 Native Library(C, C++)의 Collection입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-메모리-관리&quot;&gt;3. 메모리 관리&lt;/h2&gt;
&lt;p&gt;Java이전에는 프로그래머가 모든 프로그램 메모리를 관리했습니다. 그러나 Java에서는 JVM에 의해서 관리가 됩니다.
JVM에서 GC(Garbage Collection)이라는 녀석이 사용하지 않는 메모리를 지속적으로 식별하고
제거하며 메모리를 관리합니다.(이 GC라는 녀석도 상당한 녀석이니 나중에 다루도록 하겠습니다!)&lt;/p&gt;

&lt;p&gt;그런데 GC가 있어서 무조건 좋은 것은 아닙니다. 초기에는 Java가 C++만큼 빠르지 않았기 떄문에
많은 비판을 받았습니다. 차츰 다양한 알고리즘과 접근법이 나와 GC의 능력이 크게 향상되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;JVM은 Java에서 가장 기본적이면서도 중요하다고 생각합니다. 처음에는 가상메모리구나 정도로 시작했다면 JVM을 이루는 구조와 기능들이 많음을 알았습니다.&lt;/p&gt;

&lt;p&gt;이 구조들의 기능들이 모여 JVM을 이루는데 각각의 구조물들 또한 다양한 구조와 기능을 이루고 있습니다.
다음에 차근차근 세세한 부분까지 알아보겠습니다!!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;
&lt;p&gt;https://www.javaworld.com/article/3272244/what-is-the-jvm-introducing-the-java-virtual-machine.html&lt;/p&gt;

&lt;p&gt;https://www.geeksforgeeks.org/jvm-works-jvm-architecture/JVM&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/06/13/jvm/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/13/jvm/</guid>
        
        <category>Java</category>
        
        
      </item>
    
  </channel>
</rss>
