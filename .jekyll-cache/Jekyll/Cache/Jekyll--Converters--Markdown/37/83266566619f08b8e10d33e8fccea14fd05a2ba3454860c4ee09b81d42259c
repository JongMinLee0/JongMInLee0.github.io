I"h<p><br /></p>

<p>개발을 하다보면 <strong>javascript</strong>를 이용하여 <strong>ajax</strong>통신을 할 떄가 있습니다.(jquery를 쓰든 안쓰든) 이럴 때 종종 <code class="language-plaintext highlighter-rouge">No Access-Control-Allow-Origin header is...CORS disabled</code>하며 발생하는 에러를 만나볼 수 있습니다. 이 에러는 무엇이고 어떻게 해결할 수 있는지 알아보도록 하겠습니다.</p>

<p><br /></p>

<h2 id="security-policy--same-origin">Security Policy : Same-Origin</h2>

<p>웹 사이트는 종종 다른 서버에 요청을 전송하곤 합니다. 서버는 다른 서비스의 요청으로부터 서버를 지키기 위해 보안 정책을 사용합니다. 그 중 하나가 <strong>Same-Origin</strong> 입니다.<br />
<strong>Same-Origin</strong> 정책(policy)은 매우 제한적 입니다. 이 정책내에서는 <strong>A</strong>서버의 문서(Resource)가 <strong>A</strong>서버의 다른 문서와만 상호작용 할 수 있습니다. 간단히 말하면 같은 서버(Same origin)에서만 문서가 상호작용 할 수 있도록 강제하는 것 입니다. Same-Origin을 판단하는 기준은 <strong>Protocol</strong>, <strong>Port(명시한 경우)</strong>, <strong>Host</strong> 입니다. 이 것들이 모두 같아야 <strong>Same-Origin</strong>이라고 말할 수 있습니다.<br />
예를 들어 다음과 같은 URL이 있다고 하겠습니다.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>http://www.example.com/index.html
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이 URL을 기준으로 다른 요청들에 대해 결과를 확인해 보겠습니다.</p>

<table>
  <thead>
    <tr>
      <th>URL</th>
      <th>결과</th>
      <th>이유</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>http://www.example.com/ex/ex.html</td>
      <td>성공</td>
      <td>경로만 다름</td>
    </tr>
    <tr>
      <td>https://www.example.com/index.html</td>
      <td>실패</td>
      <td>Protocol 다름</td>
    </tr>
    <tr>
      <td>http://www.example2.com/index.html</td>
      <td>실패</td>
      <td>Host 다름</td>
    </tr>
    <tr>
      <td>http://www.example.com:82/index.html</td>
      <td>실패</td>
      <td>Port 다름</td>
    </tr>
  </tbody>
</table>

<p>위의 테이블에서 볼 수 있듯이 보안에는 문제가 없지만 상당히 제한적인 요청만 받을 수 있습니다.<br />
이를 발전 시켜 나온 것이 <strong>CORS</strong> 입니다.</p>

<p><br /></p>

<h2 id="corscross-origin-resource-sharing">CORS(Cross-Origin Resource Sharing)</h2>

<p>Origin의 외부에서 Resource를 요청하는 것을 <strong>Cross-Origin</strong>이라고 합니다. <strong>CORS</strong>는 이 Cross-Origin을 관리하는 것을 말합니다.</p>
<blockquote>
  <p><strong>Origin Server</strong> 는 CLient의 요청을 처리하고 응답하는 Server 입니다.</p>
</blockquote>

<p><strong>Same-Origin</strong> 때와는 달리 위의 표의 요청은 성공 할 수 있습니다.(CORS에서) 대신 CORS 표준이 필요합니다. 왜냐하면 CORS를 허용하게 되면 Resource에 접근할 수 있는 요청과 접근 가능한 Resource도 설정할 수 있기 때문입니다.</p>

<p>또한 CORS는 <strong>HTTP request Method</strong>를 사용하여 만들어 졌고, 대부분의 서버에서는 <strong>GET</strong> 메소드를 허용할 것 입니다. 그러나 <strong>POST, PUT, PATCH, DELETE</strong>등은 허용되지 않을 수 있습니다. 왜냐하면 악의적으로 요청을 보내어 Resource를 변화시킬 수 있기 때문입니다.</p>

<p>CORS의 요청관리는 <strong>HTTP Header</strong>를 통해서 이루어 집니다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Allow-Origin</code></li>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Allow-Credentials</code></li>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Allow-Headers</code></li>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Allow-Methods</code></li>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Expose-Headers</code></li>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Max-Age</code></li>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Request-Headers</code></li>
  <li><code class="language-plaintext highlighter-rouge">Aceess-Control-Request-Method</code></li>
  <li><code class="language-plaintext highlighter-rouge">Origin</code></li>
</ul>

<p>모두 중요하지만 <code class="language-plaintext highlighter-rouge">Aceess-Control-Allow-Origin</code>을 보겠습니다. 이 헤더는 Server가 자신의 Resource를 외부 도메인과 공유하는 방법을 지정합니다. 많은 경우 <code class="language-plaintext highlighter-rouge">*</code>을 값으로 지정하며 이 경우 모든 도메인이 공유함을 의미합니다. 원하는 도메인만 설정할 경우 <code class="language-plaintext highlighter-rouge">*</code>값 대신 특정 도메인 리스트를 설정할 수 있습니다.</p>

<h3 id="pre-flight-requests">PRE-FLIGHT REQUESTS</h3>

<p>많은 경우 <code class="language-plaintext highlighter-rouge">GET</code>을 제외한 request method는 block되어 있습니다. 그러나 서버는 무조건 적으로 차단하지는 않고 어떤 요청이 허용되는지를 확인한 후 통신하는 프로세스를 갖고 있습니다. 다음 HTTP Request 중 하나를 사용하여 요청이 이루어 지면 기존의 요청 전 Pre-flight 요청이 이루어 집니다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">PUT</code></li>
  <li><code class="language-plaintext highlighter-rouge">DELETE</code></li>
  <li><code class="language-plaintext highlighter-rouge">CONNECT</code></li>
  <li><code class="language-plaintext highlighter-rouge">OPTIONS</code></li>
  <li><code class="language-plaintext highlighter-rouge">TRACE</code></li>
  <li><code class="language-plaintext highlighter-rouge">PATCH</code></li>
</ul>

<p>Pre-flight 요청은 대부분 <code class="language-plaintext highlighter-rouge">OPTIONS</code> 헤더를 사용합니다. Pre-flight요청의 이름으로도 알 수 있듯 원래의 요청 이전에 전송이 됩니다. 기존의 요청이 안전한지 확인하기 위함이며, 서버가 안전하다고 지정하면 원래의 요청을 허용하고 그렇지 않으면 차단합니다. 아래의 그림은 <strong>Pre-flight</strong> 요청의 과정을 보여 줍니다.</p>
<p align="center">
<img src="https://user-images.githubusercontent.com/48028667/97102792-bb463c00-16eb-11eb-9a7f-fd31c97e98f6.png" />
</p>

<p>이 Pre-flight외에도 <strong>JSONp</strong>와 같이 많은 Resource 공유 솔루션이 있습니다. 그러나 전체적인 개념은 동일 합니다. 이번에는 <strong>Same-Origin</strong> 과 <strong>CORS</strong>에 대해 알아봤으며, 다음에는 CORS에 대해 실습해 보겠습니다.</p>

<p><br /></p>

<h2 id="ref">Ref</h2>
<ul>
  <li>https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/</li>
  <li>https://www.codecademy.com/articles/what-is-cors</li>
  <li>https://developer.mozilla.org/ko/docs/Web/HTTP/CORS</li>
</ul>
:ET