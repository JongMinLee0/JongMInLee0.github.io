I":`<h4 id="관련된-글">관련된 글</h4>
<ol>
  <li><strong><a href="/2020/02/09/jpa1">[JAVA] JPA(Java Persistence API)란?(1)</a></strong></li>
  <li><strong><a href="/2020/02/09/jpa2">[JAVA] JPA 기본설정 및 객체생성(2)</a></strong></li>
  <li><strong><a href="/2020/02/10/jpa3">[JAVA] JPA 어노테이션 및 트랜잭션(3)</a></strong></li>
  <li><strong><a href="/2020/02/10/jpa4">[JAVA] JPA 연관관계(4)</a></strong></li>
  <li><strong><a href="/2020/02/11/jpa5">[JAVA] JPA 영속성 컨텍스트(5)</a></strong></li>
</ol>

<p>이번에는 연관관계에 대해 보겠습니다.<br />
연관관계에는 <strong>단방향</strong>과 <strong>양방향</strong>이 있습니다. 차례대로 살펴 보겠습니다.</p>

<h2 id="1-단방향-매핑">1. 단방향 매핑</h2>
<p>지금 현재 <strong>Member</strong>객체와 <strong>Club</strong>객체가 있습니다.
<img src="/img/in-post/jpa4/relation1.png" /></p>

<blockquote>
  <p>보기 편하기 위해서 다른 컬럼들은 제외했습니다.</p>
</blockquote>

<p><strong>Club</strong>에 여러 <strong>Member</strong>가 가입할 수 있다고 해보겠습니다. 그럼 1:N의 관계가 성립합니다.
<img src="/img/in-post/jpa4/relation2.png" /></p>

<p>다음과 같은 관계가 성립됩니다. 그럼 Code로 보겠습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="nd">@Entity</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">member_id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="nd">@Enumerated</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="nc">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">RoleType</span> <span class="n">roleType</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Friend</span> <span class="n">friends</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"club_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Club</span> <span class="n">club</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Member</span><span class="o">(){}</span>

    <span class="nc">Member</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="nc">Friend</span> <span class="n">friend</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">friends</span> <span class="o">=</span> <span class="n">friend</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>현재 구분을 편하게 하기 위해서 <strong>Member</strong>와 <strong>Club</strong>의 id앞에 각자의 클래스 이름을 추가해 놨습니다.<br />
두 테이블을 연결하기 위해 <strong>@ManyToOne</strong> 어노테이션을 사용했습니다. <strong>@JoinColumn</strong>으로 ‘club_id’를 지정해서 <strong>Club</strong> 객체의 id와 조인한다고 설정이 되었습니다. 그러면 테스트를 진행해 보겠습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>

        <span class="nc">EntityManagerFactory</span> <span class="n">entityManagerFactory</span> <span class="o">=</span> <span class="nc">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="s">"jongmin"</span><span class="o">);</span>
        <span class="nc">EntityManager</span> <span class="n">entityManager</span> <span class="o">=</span> <span class="n">entityManagerFactory</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
        <span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>

        <span class="c1">// 트랜잭션 시작</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="nc">Club</span> <span class="n">club</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Club</span><span class="o">(</span><span class="s">"baskball"</span><span class="o">);</span>
            <span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">club</span><span class="o">);</span>

            <span class="nc">Friend</span> <span class="n">friend</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"park"</span><span class="o">,</span> <span class="s">"01022221111"</span><span class="o">);</span>
            <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"jongmin"</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="n">friend</span><span class="o">);</span>
            <span class="n">member</span><span class="o">.</span><span class="na">setClub</span><span class="o">(</span><span class="n">club</span><span class="o">);</span>
            <span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

            <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">member</span><span class="o">.</span><span class="na">getMember_id</span><span class="o">());</span>
            <span class="nc">Club</span> <span class="n">findClub</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">.</span><span class="na">getClub</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Club Name : "</span> <span class="o">+</span> <span class="n">findClub</span><span class="o">.</span><span class="na">getClubName</span><span class="o">());</span>

            <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">// 커밋</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="n">entityManager</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">entityManagerFactory</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Club</strong>을 먼저 만들어서 <strong>Member</strong>객체에 넣은 후 각각 저장을 실행합니다. 그 후에 <code class="language-plaintext highlighter-rouge">find()</code>를 통해서 <strong>Member</strong>객체를 불러온 후 <strong>Member</strong>객체 안의 <strong>Club</strong>를 확인해 보면 저장했던 <strong>Club</strong>가 나오는 것을 확인할 수 있습니다. <strong>Club</strong>을 조회하는 어떠한 것도 하지 않았는데 어떻게 조회가 될 수 있었을 까요?<br />
<code class="language-plaintext highlighter-rouge">@ManyToOne</code>으로 매핑되어 있었기 때문에 <strong>Club</strong>를 조회해서 가져온 것입니다. 그 결과 우리는 <strong>Member</strong>객체만 가져온다면 저장할 때 설정한 <strong>Club</strong>를 알아서 가져오는 편리한 경험을 하게 됩니다.
<img src="/img/in-post/jpa4/relation3.png" /></p>

<p><strong>Member</strong>의 ‘CLUB_ID’에는 <strong>Club</strong>의 ‘id’가 저장된 것을 확인할 수 있습니다. 저희가 <strong>@JoinColumn</strong>에 ‘club_id’를 지정했기 때문입니다.<br />
그렇다면 항상 <strong>Member</strong>를 조회하면 <strong>Club</strong>를 같이 조회해서 가져오는 것일까요? 그렇지 않습니다. <strong>@ManyToOne</strong> 어노테이션에는 속성이 존재합니다.</p>
<ul>
  <li>FetchType.LAZY : <strong>Club</strong>가 <strong>Member</strong>를 통해 사용될 때 조회됩니다.</li>
  <li>FetchType.EAGER : 무조건 같이 가지고 옵니다.(default)</li>
</ul>

<p>보통은 <strong>FetchType.LAZY</strong>의 사용을 권장합니다. 그러나 둘이 연관되어 사용하는 일이 많다면 <strong>FetchType.EAGER</strong>를 사용해도 괜찮다고 생각합니다.</p>

<h2 id="2-양방향-매핑">2. 양방향 매핑</h2>

<p>양방향 매핑에서는 <strong>Member</strong>가 여러 <strong>Club</strong>에 가입할 수 있고, <strong>Club</strong>또한 여러명의 <strong>Member</strong>를 가질 수 있다고 가정하겠습니다.<br />
JPA에서의 양방향 매핑은 데이터베이스와는 다른 형태입니다.
<img src="/img/in-post/jpa4/relation4.png" />
데이터베이스의 관계와 다른점을 눈치 채셨나요??<br />
데이터베이스에서 M:N이어도 연결된은 선은 하나입니다. 그러나 위의 사진을 보면 연결되는 선이 2개임을 볼 수 있습니다. 그 이유는 JPA에서의 양방향은 <code class="language-plaintext highlighter-rouge">단방향+단방향</code>이기 때문입니다.<br />
좀 더 이해하기 쉽게 하기 위해서 데이터베이스 이론을 공부하다 보면 <strong>M:N</strong>을 해결하는 방법으로 <strong>1:N 과 N:1</strong>의 조합으로 바꾸는 걸 생각해 보실수 있습니다.
<img src="/img/in-post/jpa4/relation5.jpg" /></p>
<center>참고: 위키피디아</center>

<p>저희는 위에서 <strong>Member</strong>에서 <strong>Clob</strong>로 가는 매핑은 설정을 했습니다. 그렇다면 이번에는 <strong>Club</strong>에서 <strong>Member</strong>로 가는 매핑을 설정해보겠습니다.</p>
<blockquote>
  <p>데이터베이스와 JPA의 차이점이 여기서 나타납니다.<br />
데이터베이스에서는 한쪽이 연결되면 다른쪽에서도 참조가 가능합니다. 예를들어 Member와 Club이 연결되었다면 서로 JOIN하여 검색이 가능합니다. 그러나 JPA에서는 위의 설정만 가지고 Member에서 Club은 참조가 가능하나 Club에서는 Member를 참조할 수가 없습니다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="nd">@Entity</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Club</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="nc">Long</span> <span class="n">club_id</span><span class="o">;</span>

    <span class="nc">String</span> <span class="n">clubName</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"club"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">memberList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;();</span>

    <span class="kd">public</span> <span class="nf">Club</span><span class="o">(){}</span>

    <span class="kd">public</span> <span class="nf">Club</span><span class="o">(</span><span class="nc">String</span> <span class="n">clubName</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">clubName</span> <span class="o">=</span> <span class="n">clubName</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Club</strong> Entity에 <strong>@OneToMany</strong>를 추가하여 <strong>Member</strong>와 단방향 연결을 하였습니다. 먼저 실습 후 양방향관계에 대해서 더 알아보겠습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>

        <span class="nc">EntityManagerFactory</span> <span class="n">entityManagerFactory</span> <span class="o">=</span> <span class="nc">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="s">"jongmin"</span><span class="o">);</span>
        <span class="nc">EntityManager</span> <span class="n">entityManager</span> <span class="o">=</span> <span class="n">entityManagerFactory</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
        <span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>

        <span class="c1">// 트랜잭션 시작</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="nc">Club</span> <span class="n">club</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Club</span><span class="o">(</span><span class="s">"baskball"</span><span class="o">);</span>
            <span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">club</span><span class="o">);</span>

            <span class="nc">Friend</span> <span class="n">friend</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"park"</span><span class="o">,</span> <span class="s">"01022221111"</span><span class="o">);</span>
            <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"jongmin"</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="n">friend</span><span class="o">);</span>
            <span class="n">member</span><span class="o">.</span><span class="na">setClub</span><span class="o">(</span><span class="n">club</span><span class="o">);</span>
            <span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

            <span class="n">entityManager</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
            <span class="n">entityManager</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

            <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">member</span><span class="o">.</span><span class="na">getMember_id</span><span class="o">());</span>
            <span class="nc">Club</span> <span class="n">findClub</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">.</span><span class="na">getClub</span><span class="o">();</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">findClub</span><span class="o">.</span><span class="na">getMemberList</span><span class="o">();</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member1</span> <span class="o">:</span> <span class="n">members</span><span class="o">){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Member Name : "</span> <span class="o">+</span> <span class="n">member1</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
            <span class="o">}</span>

            <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">// 커밋</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="n">entityManager</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">entityManagerFactory</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>

    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이전의 단방향 코드에서 <code class="language-plaintext highlighter-rouge">List&lt;Member&gt; members = findClub.getMemberList();</code>를 통해서 <strong>MemberList</strong>가 출력되는지 확인 하는 코드가 추가 되었습니다.(flush()와 clear()가 추가 되었는데 이후의 장에서 설명하겠습니다.)<br />
콘솔창을 확인해 보시면 <strong>Member</strong> Entity에 저장한 <strong>‘jongmin’</strong> 이 출력되는 것을 볼 수 있습니다.<br />
<strong>Club</strong> 엔터티에 추가 된것을 보면 <strong>@OneToMany</strong>와 <strong>mappedBy</strong> 입니다. 양방향 관계에서 이 <strong>mappedBy</strong>는 정말 중요한 역할을 합니다. JPA에서의 양방향 관계는 <strong>주인(Owner)</strong> 을 정해줘야 합니다.</p>

<p><strong>양방향 매핑 규칙</strong></p>
<ul>
  <li>객체의 두 관계중 하나를 연관관계의 <strong>주인(Owner)</strong> 으로 지정해야 한다.</li>
  <li>연관관계의 주인만이 왜래 키를 관리(등록, 수정) 한다.</li>
  <li>주인은 <strong>‘mappedBy’</strong> 속성을 사용하지 않는다.</li>
  <li>주인이 아니면 <strong>‘mappedBy’</strong> 속성으로 <strong>주인(Owner)</strong> 를 지정한다.</li>
</ul>

<p>두 앤터티중 누구를 주인으로 정하는가는 보통 <strong>외래키</strong>가 있는 엔터티를 주인으로 지정합니다. 그렇지만 단방향으로 설계하는 것이 가장 좋다고 생각합니다. 단방향으로 설계 후 양방향 관계가 필요한 경우에만 사용하는 방식으로 개발하면 좋을 것 같습니다.</p>
<blockquote>
  <p><strong>주의사항</strong><br />
양방향 매핑시 연관관계의 주인에 값을 입력해야 한다.<br />
(순수한 객체 관계를 고려하면 양쪽다 값을 입력해야 한다.)</p>
</blockquote>

<p><strong>양방향 매핑의 장점</strong></p>
<ul>
  <li>단방향 매핑만으로도 이미 연관관계 매핑은 완료.</li>
  <li>양방향 매핑은 반대 방향으로 조회(객체 그래프 탐색) 기능이 추가된 것 뿐</li>
  <li>JPQL에서 역방향으로 탐색할 일이 많음.</li>
  <li>단방향 매핑을 잘 하고 양방향 매핑은 필요할 때 추가해도 됨(테이블에 영향 X)</li>
</ul>

<p>이번에는 연관관계에 대해서 알아봤습니다. 마지막으로 <strong>Persistence Context(영속성 컨텍스트)</strong> 에 대해 알아보겠습니다.</p>

<p>전체 코드는 <a href="https://github.com/JongMinLee0/java-persistence-api">Github</a>에서 확인해보실수 있습니다.</p>

<h5 id="참고">참고</h5>
<ul>
  <li>Baeldung (https://www.baeldung.com/hibernate-one-to-many)</li>
  <li>SKplanet Academy (https://www.youtube.com/channel/UCtV98yyffjUORQRGTuLHomw)</li>
</ul>
:ET